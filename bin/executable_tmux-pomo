#! /usr/bin/env zsh

statefile="$HOME/.pomo"
short_break=300
long_break=1800
pomo=1200
first_state=1
last_state=8

zparseopts -E -A args a=advance -advance=advance

# echo args: ${(kv)args}

function startTimerAndWriteState() {
	cntdwn -t $1 > /dev/null
	echo "$currentState" >$statefile
}

# schedule
# 0 - uninit
# 1 - 20m pomo
# 2 - 5m break
# 3 - 20m pomo
# 4 - 5m break
# 5 - 20m pomo
# 6 - 5m break
# 7 - 20m pomo
# 8 - 30m break
function advanceState() {
	(( currentState = $currentState + 1 ))
	if [[ $currentState -gt $last_state ]]; then
		currentState=$first_state
	fi

	(( remainder = $currentState % 2 ))
	(( stepNum = ($currentState + $remainder) / 2 ))

	if [[ $currentState -eq $last_state ]]; then
		startTimerAndWriteState $long_break
	elif [[ $remainder -eq 1 ]]; then
		startTimerAndWriteState $pomo
	else
		startTimerAndWriteState $short_break
	fi
}

function setStateName() {
	(( remainder = $currentState % 2 ))
	(( stepNum = ($currentState + $remainder) / 2 ))

	if [[ $currentState = 0 ]]; then
		stateName="Not started"
	elif [[ $currentState -eq $last_state ]]; then
		stateName="Big break"
	elif [[ $remainder -eq 1 ]]; then
		stateName="Pomo $stepNum"
	else
		stateName="Break $stepNum"
	fi
}

function printState() {
	setStateName
	print $stateName: $(cntdwn)
}

if [[ -e $statefile ]]; then
	read currentState <$statefile
else
	currentState=0
fi

if [[ -n $advance ]]; then
	if [[ $(cntdwn -e) = 0 ]]; then
		advanceState $currentState
	else
		print Still running
	fi
fi

printState
